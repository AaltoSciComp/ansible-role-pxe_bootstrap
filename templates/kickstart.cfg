#################################################################################################
# basics
#################################################################################################
text
skipx
cmdline
{% if hostvars[item].vnc_password is defined and (hostvars[item].vnc_password|length >= 6 and hostvars[item].vnc_password|length <= 8) %}
vnc --password={{ hostvars[item].vnc_password }}
#{% else %}
#vnc
{% endif %}
reboot

# localization
lang en_US.UTF-8
keyboard fi
timezone --utc Europe/Helsinki

#firstboot --disable
{% if hostvars[item].yum_proxy is defined %}
url --url="{{ repo_location }}" --proxy={{ hostvars[item].yum_proxy }}
{% else %}
url --url="{{ repo_location }}"
{% endif %}

# repos
#{% if hostvars[item].repos is defined %}
#{% for repo in hostvars[item].repos %}
#{% if hostvars[item].yum_proxy is defined %}
#repo --name="{{ repo.name }}" --baseurl="{{ repo.url }}" --proxy={{ hostvars[item].yum_proxy }}
#{% else %}
#repo --name="{{ repo.name }}" --baseurl="{{ repo.url }}"
#{% endif %}
#{% endfor %}
#{% endif %}

#################################################################################################
# network
#################################################################################################
network --onboot=yes --bootproto=dhcp --device={{ hostvars[item].internal_interface }} --noipv6
#{% if hostvars[item].external_interface is defined %}
#network --onboot={{hostvars[item].enable_ext_nic}} --device={{ hostvars[item].external_interface }} --bootproto=static --ip={{ hostvars[item].ext_ip_addr }} --netmask={{ hostvars[item].ext_net_mask }} --nameserver={{hostvars[item].nameserver1}} --hostname={{ hostvars[item].fqdn }} --gateway={{hostvars[item].ext_gateway }} --noipv6
#{% endif %}

# firewall
firewall --enabled --service=ssh

{% if hostvars[item].central_log_host is defined %}
# Logging
logging --host={{ hostvars[item].central_log_host|replace("@","") }}
{% endif %}

#################################################################################################
# authentication
#################################################################################################
rootpw --iscrypted {{ rootpwhash }}
authselect --useshadow --passalgo sha512

#################################################################################################
# disks
#################################################################################################
%pre --erroronfail

echo Looking for NVME/SCSI disks
## Use DELLBOSS device for OS install if present.
#BOSS_DEV=$(find /dev -name "*Dell_BOSS*" -printf %P"\n" | egrep -v -e part -e scsi| head -1)
# Use NVME disk for OS install if present
NVME_DEV=$(find /dev/ -name nvme0n1|head -n 1)
SDA_DEV=$(find /dev/ -name sda|head -n 1)
if [ -n "$NVME_DEV" ]; then
   echo NVME disks detected -- installing in $NVME_DEV
   USE_DISK=$NVME_DEV
elif  [ -n "$SDA_DEV" ]; then
   echo NVME disks not detected
   echo SCSI disks detected -- installing in $SDA_DEV
   USE_DISK=$SDA_DEV
else
   echo Could not detect nvme nor scsi disks. Aborting.
   sleep 60
   exit 1
fi

cat <<EOF > /tmp/bootdisk.cfg
ignoredisk --only-use="$USE_DISK"
zerombr
clearpart --all --initlabel --drives="$USE_DISK"
bootloader --append="selinux=0" --boot-drive="$USE_DISK"
part /boot --fstype ext4 --ondisk="$USE_DISK" --size=2048
part biosboot --fstype="biosboot" --size=1 --ondisk="$USE_DISK"
part /boot/efi --fstype=efi --label EFI  --size=200 --ondisk="$USE_DISK"
part swap --size=4096 --ondisk="$USE_DISK"
part pv.01 --size=1 --ondisk="$USE_DISK" --grow
volgroup vg_root pv.01
logvol  /  --vgname=vg_root --fstype="xfs" --size=131072  --name=lv_root
EOF



%end

%include /tmp/bootdisk.cfg

%packages
@core
vim-enhanced
openssh-clients
bash-completion
gcc
gcc-c++
git
nfs-utils
openssh-server
wget
tar
nano
bind-utils
{% if hostvars[item].kickstart_packages is defined %}
{% for rpm in hostvars[item].kickstart_packages -%} 
{{ rpm }}
{%- endfor %}
{% endif %}
%end

#{% if hostvars[item].kickstart_pre_option is defined %}
#{% if hostvars[item].kickstart_extra_pre_commands is defined %}
################################################################################
#{{ hostvars[item].kickstart_pre_option }}
#{{ hostvars[item].kickstart_extra_pre_commands }}
#%end
#{% endif %}
#{% endif %}

################################################################################

%post --log=/root/post-ks-log


#{% if hostvars[item].extdefroute is defined %}
#/usr/bin/sed -i 's/DEFROUTE=yes/DEFROUTE=no/g' /etc/sysconfig/network-scripts/ifcfg-{{ hostvars[item].internal_interface }}
#/usr/bin/sed -i 's/DEFROUTE=no/DEFROUTE=yes/g' /etc/sysconfig/network-scripts/ifcfg-{{ hostvars[item].external_interface }}
#{% endif %}


/usr/bin/dnf clean all
/usr/bin/dnf -y update
/usr/bin/dnf -y -q install ansible

/usr/bin/mkdir /root/.ssh && /usr/bin/chmod 700 /root/.ssh
{% if hostvars[item].root_keys is defined %}
{% for root_key in root_keys %} 
/usr/bin/echo "{{ root_key }}" >> /root/.ssh/authorized_keys
{% endfor %}
{% endif %}
/usr/bin/chmod 600 /root/.ssh/authorized_keys

#/usr/bin/systemctl stop NetworkManager.service
#/usr/bin/systemctl disable NetworkManager.service

{% if serial_console_enable == true %}
# Remove " rhgb quiet"
perl -pi -e 's/(.*) rhgb quiet(.*)/$1$2/g' /etc/default/grub

# Set GRUB_TERMINAL="console serial"
perl -pi -e 's/GRUB_TERMINAL(.*)/GRUB_TERMINAL="console serial"/g' /etc/default/grub

# Add serial stuff to GRUB_CMDLINE_LINUX
grep console=ttyS0 /etc/default/grub >/dev/null
if [ $? -ne 0 ];then
    perl -pi -e 's/GRUB_CMDLINE_LINUX=(.*)"/GRUB_CMDLINE_LINUX=$1 console=tty0 console=ttyS0,115200"/g' /etc/default/grub
fi

# Add GRUB_SERIAL_COMMAND
grep GRUB_SERIAL_COMMAND /etc/default/grub >/dev/null
if [ $? -ne 0 ];then
    echo 'GRUB_SERIAL_COMMAND="serial --speed=115200"' >> /etc/default/grub
fi

if [ -d /sys/firmware/efi ];then
    /usr/sbin/grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
else
    /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
fi
{% endif %}

%end
#
